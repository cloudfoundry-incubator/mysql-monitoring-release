// Code generated by counterfeiter. DO NOT EDIT.
package metricsfakes

import (
	"mysql-metrics/metrics"
	"sync"
)

type FakeSender struct {
	SendValueStub        func(name string, value float64, unit string) error
	sendValueMutex       sync.RWMutex
	sendValueArgsForCall []struct {
		name  string
		value float64
		unit  string
	}
	sendValueReturns struct {
		result1 error
	}
	sendValueReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSender) SendValue(name string, value float64, unit string) error {
	fake.sendValueMutex.Lock()
	ret, specificReturn := fake.sendValueReturnsOnCall[len(fake.sendValueArgsForCall)]
	fake.sendValueArgsForCall = append(fake.sendValueArgsForCall, struct {
		name  string
		value float64
		unit  string
	}{name, value, unit})
	fake.recordInvocation("SendValue", []interface{}{name, value, unit})
	fake.sendValueMutex.Unlock()
	if fake.SendValueStub != nil {
		return fake.SendValueStub(name, value, unit)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendValueReturns.result1
}

func (fake *FakeSender) SendValueCallCount() int {
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	return len(fake.sendValueArgsForCall)
}

func (fake *FakeSender) SendValueArgsForCall(i int) (string, float64, string) {
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	return fake.sendValueArgsForCall[i].name, fake.sendValueArgsForCall[i].value, fake.sendValueArgsForCall[i].unit
}

func (fake *FakeSender) SendValueReturns(result1 error) {
	fake.SendValueStub = nil
	fake.sendValueReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSender) SendValueReturnsOnCall(i int, result1 error) {
	fake.SendValueStub = nil
	if fake.sendValueReturnsOnCall == nil {
		fake.sendValueReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendValueReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.Sender = new(FakeSender)
