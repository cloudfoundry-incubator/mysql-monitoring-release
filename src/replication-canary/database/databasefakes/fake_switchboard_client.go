// Code generated by counterfeiter. DO NOT EDIT.
package databasefakes

import (
	"sync"

	"github.com/cloudfoundry/replication-canary/database"
)

type FakeSwitchboardClient struct {
	ActiveBackendHostStub        func() (string, error)
	activeBackendHostMutex       sync.RWMutex
	activeBackendHostArgsForCall []struct {
	}
	activeBackendHostReturns struct {
		result1 string
		result2 error
	}
	activeBackendHostReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSwitchboardClient) ActiveBackendHost() (string, error) {
	fake.activeBackendHostMutex.Lock()
	ret, specificReturn := fake.activeBackendHostReturnsOnCall[len(fake.activeBackendHostArgsForCall)]
	fake.activeBackendHostArgsForCall = append(fake.activeBackendHostArgsForCall, struct {
	}{})
	fake.recordInvocation("ActiveBackendHost", []interface{}{})
	fake.activeBackendHostMutex.Unlock()
	if fake.ActiveBackendHostStub != nil {
		return fake.ActiveBackendHostStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.activeBackendHostReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSwitchboardClient) ActiveBackendHostCallCount() int {
	fake.activeBackendHostMutex.RLock()
	defer fake.activeBackendHostMutex.RUnlock()
	return len(fake.activeBackendHostArgsForCall)
}

func (fake *FakeSwitchboardClient) ActiveBackendHostCalls(stub func() (string, error)) {
	fake.activeBackendHostMutex.Lock()
	defer fake.activeBackendHostMutex.Unlock()
	fake.ActiveBackendHostStub = stub
}

func (fake *FakeSwitchboardClient) ActiveBackendHostReturns(result1 string, result2 error) {
	fake.activeBackendHostMutex.Lock()
	defer fake.activeBackendHostMutex.Unlock()
	fake.ActiveBackendHostStub = nil
	fake.activeBackendHostReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSwitchboardClient) ActiveBackendHostReturnsOnCall(i int, result1 string, result2 error) {
	fake.activeBackendHostMutex.Lock()
	defer fake.activeBackendHostMutex.Unlock()
	fake.ActiveBackendHostStub = nil
	if fake.activeBackendHostReturnsOnCall == nil {
		fake.activeBackendHostReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.activeBackendHostReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSwitchboardClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activeBackendHostMutex.RLock()
	defer fake.activeBackendHostMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSwitchboardClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.SwitchboardClient = new(FakeSwitchboardClient)
