// Code generated by counterfeiter. DO NOT EDIT.
package canaryfakes

import (
	"sync"
	"time"

	"github.com/cloudfoundry/replication-canary/canary"
	"github.com/cloudfoundry/replication-canary/models"
)

type FakeChirper struct {
	ChirpStub        func([]*models.NamedConnection, *models.NamedConnection, time.Time) (bool, error)
	chirpMutex       sync.RWMutex
	chirpArgsForCall []struct {
		arg1 []*models.NamedConnection
		arg2 *models.NamedConnection
		arg3 time.Time
	}
	chirpReturns struct {
		result1 bool
		result2 error
	}
	chirpReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChirper) Chirp(arg1 []*models.NamedConnection, arg2 *models.NamedConnection, arg3 time.Time) (bool, error) {
	var arg1Copy []*models.NamedConnection
	if arg1 != nil {
		arg1Copy = make([]*models.NamedConnection, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.chirpMutex.Lock()
	ret, specificReturn := fake.chirpReturnsOnCall[len(fake.chirpArgsForCall)]
	fake.chirpArgsForCall = append(fake.chirpArgsForCall, struct {
		arg1 []*models.NamedConnection
		arg2 *models.NamedConnection
		arg3 time.Time
	}{arg1Copy, arg2, arg3})
	fake.recordInvocation("Chirp", []interface{}{arg1Copy, arg2, arg3})
	fake.chirpMutex.Unlock()
	if fake.ChirpStub != nil {
		return fake.ChirpStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.chirpReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChirper) ChirpCallCount() int {
	fake.chirpMutex.RLock()
	defer fake.chirpMutex.RUnlock()
	return len(fake.chirpArgsForCall)
}

func (fake *FakeChirper) ChirpCalls(stub func([]*models.NamedConnection, *models.NamedConnection, time.Time) (bool, error)) {
	fake.chirpMutex.Lock()
	defer fake.chirpMutex.Unlock()
	fake.ChirpStub = stub
}

func (fake *FakeChirper) ChirpArgsForCall(i int) ([]*models.NamedConnection, *models.NamedConnection, time.Time) {
	fake.chirpMutex.RLock()
	defer fake.chirpMutex.RUnlock()
	argsForCall := fake.chirpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeChirper) ChirpReturns(result1 bool, result2 error) {
	fake.chirpMutex.Lock()
	defer fake.chirpMutex.Unlock()
	fake.ChirpStub = nil
	fake.chirpReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChirper) ChirpReturnsOnCall(i int, result1 bool, result2 error) {
	fake.chirpMutex.Lock()
	defer fake.chirpMutex.Unlock()
	fake.ChirpStub = nil
	if fake.chirpReturnsOnCall == nil {
		fake.chirpReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.chirpReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChirper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.chirpMutex.RLock()
	defer fake.chirpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChirper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ canary.Chirper = new(FakeChirper)
