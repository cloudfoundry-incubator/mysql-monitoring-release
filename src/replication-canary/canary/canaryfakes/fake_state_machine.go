// Code generated by counterfeiter. DO NOT EDIT.
package canaryfakes

import (
	"sync"
	"time"

	"github.com/cloudfoundry/replication-canary/canary"
)

type FakeStateMachine struct {
	BecomesNotUnhealthyStub        func(time.Time)
	becomesNotUnhealthyMutex       sync.RWMutex
	becomesNotUnhealthyArgsForCall []struct {
		arg1 time.Time
	}
	BecomesUnhealthyStub        func(time.Time)
	becomesUnhealthyMutex       sync.RWMutex
	becomesUnhealthyArgsForCall []struct {
		arg1 time.Time
	}
	GetStateStub        func() canary.State
	getStateMutex       sync.RWMutex
	getStateArgsForCall []struct {
	}
	getStateReturns struct {
		result1 canary.State
	}
	getStateReturnsOnCall map[int]struct {
		result1 canary.State
	}
	RemainsInSameStateStub        func(time.Time)
	remainsInSameStateMutex       sync.RWMutex
	remainsInSameStateArgsForCall []struct {
		arg1 time.Time
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateMachine) BecomesNotUnhealthy(arg1 time.Time) {
	fake.becomesNotUnhealthyMutex.Lock()
	fake.becomesNotUnhealthyArgsForCall = append(fake.becomesNotUnhealthyArgsForCall, struct {
		arg1 time.Time
	}{arg1})
	fake.recordInvocation("BecomesNotUnhealthy", []interface{}{arg1})
	fake.becomesNotUnhealthyMutex.Unlock()
	if fake.BecomesNotUnhealthyStub != nil {
		fake.BecomesNotUnhealthyStub(arg1)
	}
}

func (fake *FakeStateMachine) BecomesNotUnhealthyCallCount() int {
	fake.becomesNotUnhealthyMutex.RLock()
	defer fake.becomesNotUnhealthyMutex.RUnlock()
	return len(fake.becomesNotUnhealthyArgsForCall)
}

func (fake *FakeStateMachine) BecomesNotUnhealthyCalls(stub func(time.Time)) {
	fake.becomesNotUnhealthyMutex.Lock()
	defer fake.becomesNotUnhealthyMutex.Unlock()
	fake.BecomesNotUnhealthyStub = stub
}

func (fake *FakeStateMachine) BecomesNotUnhealthyArgsForCall(i int) time.Time {
	fake.becomesNotUnhealthyMutex.RLock()
	defer fake.becomesNotUnhealthyMutex.RUnlock()
	argsForCall := fake.becomesNotUnhealthyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateMachine) BecomesUnhealthy(arg1 time.Time) {
	fake.becomesUnhealthyMutex.Lock()
	fake.becomesUnhealthyArgsForCall = append(fake.becomesUnhealthyArgsForCall, struct {
		arg1 time.Time
	}{arg1})
	fake.recordInvocation("BecomesUnhealthy", []interface{}{arg1})
	fake.becomesUnhealthyMutex.Unlock()
	if fake.BecomesUnhealthyStub != nil {
		fake.BecomesUnhealthyStub(arg1)
	}
}

func (fake *FakeStateMachine) BecomesUnhealthyCallCount() int {
	fake.becomesUnhealthyMutex.RLock()
	defer fake.becomesUnhealthyMutex.RUnlock()
	return len(fake.becomesUnhealthyArgsForCall)
}

func (fake *FakeStateMachine) BecomesUnhealthyCalls(stub func(time.Time)) {
	fake.becomesUnhealthyMutex.Lock()
	defer fake.becomesUnhealthyMutex.Unlock()
	fake.BecomesUnhealthyStub = stub
}

func (fake *FakeStateMachine) BecomesUnhealthyArgsForCall(i int) time.Time {
	fake.becomesUnhealthyMutex.RLock()
	defer fake.becomesUnhealthyMutex.RUnlock()
	argsForCall := fake.becomesUnhealthyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateMachine) GetState() canary.State {
	fake.getStateMutex.Lock()
	ret, specificReturn := fake.getStateReturnsOnCall[len(fake.getStateArgsForCall)]
	fake.getStateArgsForCall = append(fake.getStateArgsForCall, struct {
	}{})
	fake.recordInvocation("GetState", []interface{}{})
	fake.getStateMutex.Unlock()
	if fake.GetStateStub != nil {
		return fake.GetStateStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getStateReturns
	return fakeReturns.result1
}

func (fake *FakeStateMachine) GetStateCallCount() int {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return len(fake.getStateArgsForCall)
}

func (fake *FakeStateMachine) GetStateCalls(stub func() canary.State) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = stub
}

func (fake *FakeStateMachine) GetStateReturns(result1 canary.State) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = nil
	fake.getStateReturns = struct {
		result1 canary.State
	}{result1}
}

func (fake *FakeStateMachine) GetStateReturnsOnCall(i int, result1 canary.State) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = nil
	if fake.getStateReturnsOnCall == nil {
		fake.getStateReturnsOnCall = make(map[int]struct {
			result1 canary.State
		})
	}
	fake.getStateReturnsOnCall[i] = struct {
		result1 canary.State
	}{result1}
}

func (fake *FakeStateMachine) RemainsInSameState(arg1 time.Time) {
	fake.remainsInSameStateMutex.Lock()
	fake.remainsInSameStateArgsForCall = append(fake.remainsInSameStateArgsForCall, struct {
		arg1 time.Time
	}{arg1})
	fake.recordInvocation("RemainsInSameState", []interface{}{arg1})
	fake.remainsInSameStateMutex.Unlock()
	if fake.RemainsInSameStateStub != nil {
		fake.RemainsInSameStateStub(arg1)
	}
}

func (fake *FakeStateMachine) RemainsInSameStateCallCount() int {
	fake.remainsInSameStateMutex.RLock()
	defer fake.remainsInSameStateMutex.RUnlock()
	return len(fake.remainsInSameStateArgsForCall)
}

func (fake *FakeStateMachine) RemainsInSameStateCalls(stub func(time.Time)) {
	fake.remainsInSameStateMutex.Lock()
	defer fake.remainsInSameStateMutex.Unlock()
	fake.RemainsInSameStateStub = stub
}

func (fake *FakeStateMachine) RemainsInSameStateArgsForCall(i int) time.Time {
	fake.remainsInSameStateMutex.RLock()
	defer fake.remainsInSameStateMutex.RUnlock()
	argsForCall := fake.remainsInSameStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateMachine) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.becomesNotUnhealthyMutex.RLock()
	defer fake.becomesNotUnhealthyMutex.RUnlock()
	fake.becomesUnhealthyMutex.RLock()
	defer fake.becomesUnhealthyMutex.RUnlock()
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	fake.remainsInSameStateMutex.RLock()
	defer fake.remainsInSameStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateMachine) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ canary.StateMachine = new(FakeStateMachine)
