// Code generated by counterfeiter. DO NOT EDIT.
package canaryfakes

import (
	"sync"

	"github.com/cloudfoundry/replication-canary/canary"
	"github.com/cloudfoundry/replication-canary/models"
)

type FakeHealthchecker struct {
	HealthyStub        func(*models.NamedConnection) (bool, error)
	healthyMutex       sync.RWMutex
	healthyArgsForCall []struct {
		arg1 *models.NamedConnection
	}
	healthyReturns struct {
		result1 bool
		result2 error
	}
	healthyReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthchecker) Healthy(arg1 *models.NamedConnection) (bool, error) {
	fake.healthyMutex.Lock()
	ret, specificReturn := fake.healthyReturnsOnCall[len(fake.healthyArgsForCall)]
	fake.healthyArgsForCall = append(fake.healthyArgsForCall, struct {
		arg1 *models.NamedConnection
	}{arg1})
	fake.recordInvocation("Healthy", []interface{}{arg1})
	fake.healthyMutex.Unlock()
	if fake.HealthyStub != nil {
		return fake.HealthyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.healthyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthchecker) HealthyCallCount() int {
	fake.healthyMutex.RLock()
	defer fake.healthyMutex.RUnlock()
	return len(fake.healthyArgsForCall)
}

func (fake *FakeHealthchecker) HealthyCalls(stub func(*models.NamedConnection) (bool, error)) {
	fake.healthyMutex.Lock()
	defer fake.healthyMutex.Unlock()
	fake.HealthyStub = stub
}

func (fake *FakeHealthchecker) HealthyArgsForCall(i int) *models.NamedConnection {
	fake.healthyMutex.RLock()
	defer fake.healthyMutex.RUnlock()
	argsForCall := fake.healthyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthchecker) HealthyReturns(result1 bool, result2 error) {
	fake.healthyMutex.Lock()
	defer fake.healthyMutex.Unlock()
	fake.HealthyStub = nil
	fake.healthyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthchecker) HealthyReturnsOnCall(i int, result1 bool, result2 error) {
	fake.healthyMutex.Lock()
	defer fake.healthyMutex.Unlock()
	fake.HealthyStub = nil
	if fake.healthyReturnsOnCall == nil {
		fake.healthyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.healthyReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthchecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.healthyMutex.RLock()
	defer fake.healthyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthchecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ canary.Healthchecker = new(FakeHealthchecker)
