// Code generated by counterfeiter. DO NOT EDIT.
package alertfakes

import (
	"replication-canary/alert"
	"sync"
)

type FakeNotificationsClient struct {
	EmailStub        func(clientToken string, to string, subject string, html string, kindID string) error
	emailMutex       sync.RWMutex
	emailArgsForCall []struct {
		clientToken string
		to          string
		subject     string
		html        string
		kindID      string
	}
	emailReturns struct {
		result1 error
	}
	emailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationsClient) Email(clientToken string, to string, subject string, html string, kindID string) error {
	fake.emailMutex.Lock()
	ret, specificReturn := fake.emailReturnsOnCall[len(fake.emailArgsForCall)]
	fake.emailArgsForCall = append(fake.emailArgsForCall, struct {
		clientToken string
		to          string
		subject     string
		html        string
		kindID      string
	}{clientToken, to, subject, html, kindID})
	fake.recordInvocation("Email", []interface{}{clientToken, to, subject, html, kindID})
	fake.emailMutex.Unlock()
	if fake.EmailStub != nil {
		return fake.EmailStub(clientToken, to, subject, html, kindID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.emailReturns.result1
}

func (fake *FakeNotificationsClient) EmailCallCount() int {
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	return len(fake.emailArgsForCall)
}

func (fake *FakeNotificationsClient) EmailArgsForCall(i int) (string, string, string, string, string) {
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	return fake.emailArgsForCall[i].clientToken, fake.emailArgsForCall[i].to, fake.emailArgsForCall[i].subject, fake.emailArgsForCall[i].html, fake.emailArgsForCall[i].kindID
}

func (fake *FakeNotificationsClient) EmailReturns(result1 error) {
	fake.EmailStub = nil
	fake.emailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationsClient) EmailReturnsOnCall(i int, result1 error) {
	fake.EmailStub = nil
	if fake.emailReturnsOnCall == nil {
		fake.emailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ alert.NotificationsClient = new(FakeNotificationsClient)
