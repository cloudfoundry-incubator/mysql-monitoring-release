<%
  cluster_ips = nil
  if_p('mysql-monitoring.replication-canary.cluster_ips') do |ips|
    # cluster_ips may contain nil values due to lack of flexibility in spiff
    cluster_ips = ips.compact
  end.else do
    cluster_ips = link('mysql').instances.map { |instance| instance.address }
  end

  proxy_username = nil
  if_p('mysql-monitoring.replication-canary.switchboard_username') do |username|
    # cluster_ips may contain nil values due to lack of flexibility in spiff
    proxy_username = username
  end.else do
    proxy_username = link('proxy').p('cf_mysql.proxy.api_username')
  end

  proxy_password = nil
  if_p('mysql-monitoring.replication-canary.switchboard_password') do |password|
    proxy_password = password
  end.else do
    proxy_password = link('proxy').p('cf_mysql.proxy.api_password')
  end

  def switchboard_urls
    proxy_count = nil
    if_p('mysql-monitoring.replication-canary.switchboard_count') do |count|
      proxy_count = count
    end.else do
      proxy_count = link('proxy').instances.count
    end

    if_p('cf_mysql.external_host') do |external_host|
      return proxy_count.times.map{ |i| "https://proxy-#{i}-#{external_host}" }
    end.else do
      link('proxy').if_p('cf_mysql.external_host') do |external_host|
         return proxy_count.times.map{ |i| "https://proxy-#{i}-#{external_host}" }
      end.else_if_p('cf_mysql.proxy.api_port') do |api_port|
        proxy_ips = link('proxy').instances.map { |instance| instance.address }
        return proxy_ips.map{ |proxy_ip| "http://#{proxy_ip}:#{api_port}" }
      end.else do
        return []
      end
    end
  end

  poll_frequency = p('mysql-monitoring.replication-canary.poll_frequency')
  write_read_delay = p('mysql-monitoring.replication-canary.write_read_delay')

  # This is a duplicate validation as in the actual replication canary. It is here so that the job will
  # exit 1 at template evaluation time, not runtime, i.e. the deploy should fail before rolling the cluster.
  if write_read_delay >= poll_frequency
    raise 'Invalid configuration - poll_frequency should be greater than write_read_delay'
  end
%>
---
NotifyOnly: <%= p('mysql-monitoring.notify_only') %>
WriteReadDelay: <%= write_read_delay %>
PollFrequency: <%= poll_frequency %>
PidFile: /var/vcap/sys/run/replication-canary/replication-canary.pid
MySQL:
  ClusterIPs: <%= cluster_ips %>
  Port: <%= p('mysql-monitoring.replication-canary.mysql_port') %>
  GaleraHealthcheckPort: 9200 # From cf-mysql-release/jobs/mysql/templates/galera_healthcheck_config.yaml.erb
Canary:
  Database: <%= p('mysql-monitoring.replication-canary.canary_database') %>
  Username: <%= p('mysql-monitoring.replication-canary.canary_username') %>
  Password: <%= p('mysql-monitoring.replication-canary.canary_password') %>
Notifications:
  AdminClientUsername: <%= p('mysql-monitoring.replication-canary.uaa_admin_client_username') %>
  AdminClientSecret: <%= p('mysql-monitoring.replication-canary.uaa_admin_client_secret') %>
  ClientUsername: <%= p('mysql-monitoring.replication-canary.notifications_client_username') %>
  ClientSecret: <%= p('mysql-monitoring.replication-canary.notifications_client_secret') %>
  NotificationsDomain: notifications.<%= p('domain') %>
  UAADomain: uaa.<%= p('domain') %>
  ToAddress: <%= p('mysql-monitoring.recipient_email') %>
  SystemDomain: <%= p('domain') %>
  ClusterIdentifier: <%= p('mysql-monitoring.cluster_identifier') %>
Switchboard:
  URLs: <%= JSON.generate(switchboard_urls) %>
  Username: <%= proxy_username %>
  Password: <%= proxy_password %>
SkipSSLValidation: <%= p('cf.skip_ssl_validation') %>
APIPort: <%= p('mysql-monitoring.replication-canary.api_port') %>
